#########################
#                       #
# THIS IS A MASTER FILE #
#  ~/minecraft/master   #
#                       #
#########################

## @RobotoRaccoon

*:/clearrap [$p] [$s] [$c] [$] = >>>
    _verify_op();

    if ($ == '') {
        _error('/clearrap <player> <section> <id> <reason>');
    }

    @player = _autocomplete_player($p);
    @section = _RAP_section_check($s);
    @count = $c;
    @reason = $;

    @UUID = _UUID_player_get(@player, true);
    _RAP_entry_clear(@UUID, @section, @count, @reason);
<<<

*:/uuidrap [$id] [$] = >>>
    _verify_janitor();
    _RAP_print_UUID($id, $);
<<<

*:/rap [$p] [$] = >>>
    _verify_janitor();
    _RAP_print_player($p, $);

    ## /oldrap compatibility
    try {
        @u = to_lower(_UUID_alternate_accounts($p)[0]);
        if (array_size(get_values("bandb.@u")) > 0) {
            msg(colorize("&cView old rap with &4/oldrap @u"));
        }
    } catch (Exception @e) {}
<<<

*:/oldrap [$p] = >>>
    _verify_janitor();
    _userhist($p) ## In bansystem/auto_includes.ms
<<<

*:/kick [$p] [$] = >>>
    _verify_janitor();

    if ($p == '') {
        _error('/kick &4<player> <reason>');
    }
    if ($ == '') {
        _error('/kick <player> &4<reason>');
    }

    @p = _autocomplete_player($p, true);

    ## Allow console to kick all. Disallow Staff from kicking Staff/Ops.
    if (player() != '~console') {
        ## Checks for Janitors - Cannot kick other staff.
        if (!has_permission('ch_staff')) {
            if (has_permission(@p, 'ch_janitor')) {
                _error('You cannot fondle another staff.');
            }
        }

        ## Does not let anyone but ops kick staff.
        if (!has_permission('ch_op')) {
            if (has_permission(@p, 'ch_staff')) {
                _error('You cannot fondle another staff.');
            }
        }
    }

    @info = _RAP_info_generate($, time(), player());
    _RAP_kick(@p, @info);
<<<

*:/tempmute [$p] [$l] [$] = >>>
    _verify_janitor();

    if ($p == '') {
        _error('/tempmute &4<player> <length> <reason>');
    }
    if ($l == '') {
        _error('/tempmute <player> &4<length> <reason>');
    }
    if (!is_numeric($l[0])) {
        _error('Mute length must be numeric.');
    }
    if ($ == '') {
        _error('/tempmute <player> <length> &4<reason>');
    }

    @p = _autocomplete_player($p);
    @info = _RAP_info_generate_timed($, time(), player(), $l);
    _RAP_mute(@p, @info);
<<<

*:/mute [$p] [$] = >>>
    _verify_janitor();

    if ($p == '') {
        _error('/mute &4<player> <reason>');
    }
    if ($ == '') {
        _error('/mute <player> &4<reason>');
    }
    if (is_numeric($[0])) {
        _error('Did you mean /tempmute ?');
    }

    @p = _autocomplete_player($p);
    @info = _RAP_info_generate($, time(), player(), 'Forever');
    _RAP_mute(@p, @info);
<<<

*:/unmute [$p] [$] = >>>
    _verify_janitor();
    if ($p == '') {
        _error('/unmute <player>');
    }
    @p = _autocomplete_player($p);
    sudo("/emute @p 1s");
<<<

*:/tempban [$p] [$l] [$] = >>>
    _verify_staff();

    if ($p == '') {
        _error('/tempban &4<player> <length> <reason>');
    }
    if ($l == '') {
        _error('/tempban <player> &4<length> <reason>');
    }
    if (!is_numeric($l[0])) {
        _error('Ban length must be numeric.');
    }
    if ($ == '') {
        _error('/tempban <player> <length> &4<reason>');
    }

    @p = _autocomplete_player($p);
    @info = _RAP_info_generate_timed($, time(), player(), $l);
    _RAP_ban(@p, @info);
<<<

*:/ban [$p] [$] = >>>
    _verify_staff();

    if ($p == '') {
        _error('/ban &4<player> <reason>');
    }
    if ($ == '') {
        _error('/ban <player> &4<reason>');
    }
    if (is_numeric($[0])) {
        _error('Did you mean /tempban ?');
    }

    @p = _autocomplete_player($p);
    @info = _RAP_info_generate($, time(), player(), 'Forever');
    _RAP_ban(@p, @info);
<<<

*:/addcomment [$p] [$] = call_alias('/comment' $p $);
*:/comment [$p] [$] = >>>
    _verify_janitor();

    if ($p == '') {
        _error('/comment &4<player> <comment>');
    }
    if ($ == '') {
        _error('/comment <player> &4<comment>');
    }

    @p = _autocomplete_player($p);
    @info = _RAP_info_generate($, time(), player());
    _RAP_comment(@p, @info);
<<<

